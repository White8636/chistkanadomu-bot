import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(NAME_PHONE, CITY, ADDRESS, TIME, COMMENT, PHOTO) = range(6)

ADMIN_CHAT_ID = 404748283  # –¢–≤–æ–π Telegram ID

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    ["üßº –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É"],
    ["üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"],
    ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìé –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"],
    ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
def check_cancel_or_menu(text):
    return text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "üßº –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É", "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "‚ÑπÔ∏è –û –Ω–∞—Å", "üìé –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"]

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return NAME_PHONE

async def name_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_cancel_or_menu(update.message.text):
        return await handle_menu_buttons(update, context)
    context.user_data["name_phone"] = update.message.text.strip()
    await update.message.reply_text("üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_cancel_or_menu(update.message.text):
        return await handle_menu_buttons(update, context)
    context.user_data["city"] = update.message.text.strip()
    await update.message.reply_text("üìç –ê–¥—Ä–µ—Å: –ø–æ–¥—ä–µ–∑–¥-—ç—Ç–∞–∂-–∫–≤–∞—Ä—Ç–∏—Ä–∞ ‚Äî –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞")
    return ADDRESS

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_cancel_or_menu(update.message.text):
        return await handle_menu_buttons(update, context)
    context.user_data["address"] = update.message.text.strip()
    await update.message.reply_text("üïì –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—Ç—Ä–æ–º, –≤–µ—á–µ—Ä–æ–º):")
    return TIME

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_cancel_or_menu(update.message.text):
        return await handle_menu_buttons(update, context)
    context.user_data["time"] = update.message.text.strip()
    await update.message.reply_text("‚úè –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–∏–ø –º–µ–±–µ–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è):")
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_cancel_or_menu(update.message.text):
        return await handle_menu_buttons(update, context)
    context.user_data["comment"] = update.message.text.strip()
    await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    return PHOTO

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photo"] = update.message.photo[-1].file_id
    await send_summary(update, context)
    return ConversationHandler.END

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photo"] = None
    await send_summary(update, context)
    return ConversationHandler.END

async def send_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = context.user_data
    text = f"""{d['name_phone']}
{d['city']}
{d['address']}
{d['time']}
{d['comment']}"""
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    if d.get("photo"):
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=d["photo"])
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=main_menu)

async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return ConversationHandler.END

    elif text == "üßº –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É":
        return await start_order(update, context)

    elif text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        await update.message.reply_text("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—è–∑–Ω—ë–Ω–Ω–æ–π –º–µ–±–µ–ª–∏:")
        return PHOTO

    elif text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º":
        await update.message.reply_text("üìû –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram: @White_Buddha
–ò–ª–∏ –≤ WhatsApp: https://wa.me/qr/4HDE6MIQIIDVM1")

    elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        await update.message.reply_text("–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤—ã–µ–∑–¥–Ω–æ–π —Ö–∏–º—á–∏—Å—Ç–∫–æ–π –º–µ–±–µ–ª–∏ –∏ –∫–æ–≤—Ä–æ–≤ –≤ –ú–æ—Å–∫–≤–µ –∏ –ú–û. –†–∞–±–æ—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –ø–æ —á–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω–µ.")

    elif text == "üìé –ü—Ä–∞–π—Å-–ª–∏—Å—Ç":
        await update.message.reply_text("""üßæ –ü—Ä–∞–π—Å:
- –î–∏–≤–∞–Ω –æ—Ç 1500‚ÇΩ
- –ú–∞—Ç—Ä–∞—Å –æ—Ç 1000‚ÇΩ
- –ö–æ–≤–µ—Ä –æ—Ç 500‚ÇΩ/–º¬≤""")

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu)

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
    return ConversationHandler.END

def main():
    import config
    app = ApplicationBuilder().token(config.BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üßº –ó–∞–∫–∞–∑–∞—Ç—å —Ö–∏–º—á–∏—Å—Ç–∫—É$"), start_order)],
        states={
            NAME_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_phone)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
            PHOTO: [
                MessageHandler(filters.PHOTO, photo),
                CommandHandler("skip", skip_photo),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_buttons))

    app.run_polling()

if __name__ == "__main__":
    main()
