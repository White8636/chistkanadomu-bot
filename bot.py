import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
(
    NAME_PHONE, CITY, ADDRESS, TIME, COMMENT, PHOTO
) = range(6)

# –í–∞—à–∞ TELEGRAM ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
ADMIN_CHAT_ID = 404748283

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ö–∏–º—á–∏—Å—Ç–∫–∏.\n\n–ù–∞–∂–º–∏ /order, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.")


async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ):")
    return NAME_PHONE

async def name_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name_phone"] = update.message.text.strip()
    await update.message.reply_text("üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text.strip()
    await update.message.reply_text("üìç –ê–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ–¥—ä–µ–∑–¥-—ç—Ç–∞–∂-–∫–≤–∞—Ä—Ç–∏—Ä–∞ ‚Äî –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞")
    return ADDRESS

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text.strip()
    await update.message.reply_text("üïì –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—Ç—Ä–æ–º, –≤–µ—á–µ—Ä–æ–º):")
    return TIME

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text.strip()
    await update.message.reply_text("‚úè –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–∏–ø –º–µ–±–µ–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è):")
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text.strip()
    await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    return PHOTO

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    context.user_data["photo"] = photo
    await send_summary(update, context)
    return ConversationHandler.END

async def skip_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["photo"] = None
    await send_summary(update, context)
    return ConversationHandler.END

async def send_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    d = context.user_data
    text = f"""{d['name_phone']}
{d['city']}
{d['address']}
{d['time']}
{d['comment']}"""

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –±—ã–ª–æ
    if d.get("photo"):
        await context.bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=d["photo"])

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    import config
    app = ApplicationBuilder().token(config.BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("order", order)],
        states={
            NAME_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_phone)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
            PHOTO: [
                MessageHandler(filters.PHOTO, photo),
                CommandHandler("skip", skip_photo),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
